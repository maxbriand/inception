#-------------------------------------#
# Purpose:

  # START FINISHING VOLUME CONFIGURATION TO STORE DATAS


  # Designed to simplify the use of multiple application like :
  # Nginx
  # Wordpress: website
  # MariaDB: for database

  # Service steps:
    # 1st: depends_on - check dependencies before building the container
    # 2nd: build - launch each service in separate containers
    # 3rd: environment (not hard-coded in the file) - setting environment variables of the container (API keys, passwords, database credentials securely)
    # 4th: volumes - specify the volume location, where datas would be store if there if the container is restarted
      # mydevice-file_to_save
    # 5th: ports - expose containers port to the hors
    # 6th: network - configurate the network for container communication + setting the name of the network
    # 7th: restart - specify behavior if a container is stopped
    # Connect these containers themselves

    # Orchestrate containers:
      	# docker-compose up 
	# Remove logs:
		# dc up -d
    # Remove volume + containers ? if orchestrate error on volumes: 
		# dc down -v: remove all containers 
	# check machine volumes
		# docker volume ls
	# delete all volumes:
		#docker volume rm $(docker volume ls -q)

#------------------------------------#

# Defines all services (containers) for the application.
services:
  nginx:
    depends_on: # to start wordpress before nginx
      - wordpress
    build: requirements/nginx/.
    env_file: 
      - .env
      #secrets files to add?
    volumes:
      - wp_volume:/var/www/html
    networks:
      - inception
    restart: on-failure

  wordpress:
    depends_on: # to start mariadb before wordpress
      - mariadb
    build: requirements/wordpress/.
    env_file: 
      - .env
    volumes:
      - wp_volume:/var/www/html
    networks:
      - inception
    restart: on-failure

  mariadb:
    build: requirements/mariadb/.
    env_file: 
      - .env
    volumes:
      - mdb_volume:/var/lib/mysql
    networks:
      - inception
    restart: on-failure

volumes:
  wp_volume:
    driver: local
    driver_opts:
      type: none
      device: ~/data/wordpress
      o: bind
  mdb_volume:
    driver: local
    driver_opts:
      type: none
      # /var/lib/docker/volumes/srcs_marilaladb/_data'
      device: ~/data/mariadb # change to mbriand later
      o: bind

networks:
  inception:
    driver: bridge
